// Code generated by MockGen. DO NOT EDIT.
// Source: domain/deckOfCards/repository.go

// Package mock_deckOfCards is a generated GoMock package.
package mock_deckOfCards

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	dao "github.com/yoratyo/card-games/model/dao"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetCardDeckByDeckID mocks base method.
func (m *MockRepository) GetCardDeckByDeckID(ctx *gin.Context, deckID uuid.UUID) ([]dao.CardDeck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardDeckByDeckID", ctx, deckID)
	ret0, _ := ret[0].([]dao.CardDeck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardDeckByDeckID indicates an expected call of GetCardDeckByDeckID.
func (mr *MockRepositoryMockRecorder) GetCardDeckByDeckID(ctx, deckID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardDeckByDeckID", reflect.TypeOf((*MockRepository)(nil).GetCardDeckByDeckID), ctx, deckID)
}

// GetDeckDetailByID mocks base method.
func (m *MockRepository) GetDeckDetailByID(ctx *gin.Context, ID uuid.UUID) (dao.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeckDetailByID", ctx, ID)
	ret0, _ := ret[0].(dao.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeckDetailByID indicates an expected call of GetDeckDetailByID.
func (mr *MockRepositoryMockRecorder) GetDeckDetailByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeckDetailByID", reflect.TypeOf((*MockRepository)(nil).GetDeckDetailByID), ctx, ID)
}

// PatchDeckByID mocks base method.
func (m *MockRepository) PatchDeckByID(ctx *gin.Context, ID uuid.UUID, data map[string]interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDeckByID", ctx, ID, data)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchDeckByID indicates an expected call of PatchDeckByID.
func (mr *MockRepositoryMockRecorder) PatchDeckByID(ctx, ID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDeckByID", reflect.TypeOf((*MockRepository)(nil).PatchDeckByID), ctx, ID, data)
}

// PatchDrawCardDeck mocks base method.
func (m *MockRepository) PatchDrawCardDeck(ctx *gin.Context, deckID uuid.UUID, count int, data map[string]interface{}) ([]dao.CardDeck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDrawCardDeck", ctx, deckID, count, data)
	ret0, _ := ret[0].([]dao.CardDeck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchDrawCardDeck indicates an expected call of PatchDrawCardDeck.
func (mr *MockRepositoryMockRecorder) PatchDrawCardDeck(ctx, deckID, count, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDrawCardDeck", reflect.TypeOf((*MockRepository)(nil).PatchDrawCardDeck), ctx, deckID, count, data)
}

// StoreDeck mocks base method.
func (m *MockRepository) StoreDeck(ctx *gin.Context, req dao.Deck) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreDeck", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreDeck indicates an expected call of StoreDeck.
func (mr *MockRepositoryMockRecorder) StoreDeck(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreDeck", reflect.TypeOf((*MockRepository)(nil).StoreDeck), ctx, req)
}
